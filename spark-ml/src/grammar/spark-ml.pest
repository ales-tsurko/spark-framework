module = { SOI ~ (statement | "\n")* ~ EOI }

statement        = _{ (assignment | if_expr | call | ext_resource | sub_resource) ~ "\n" }
    ext_resource = { "ext" ~ STRING }
    sub_resource = { "sub" ~ node }
    assignment   = !{ ID ~ "=" ~ "\n"* ~ expression }

expression = _{ node 
                | if_expr 
                | node_anon 
                | bool_expr 
                | algebraic_expr 
                | list 
                | call
                | NUMBER 
                | BOOL 
                | STRING 
                | GD_VALUE 
              }

if_expr    = { "if" ~ bool_expr ~ body ~ elseif* ~ ifelse? }
    elseif = { "\n"+ ~ "else if" ~ bool_expr ~ body }
    ifelse = { "\n"+ ~ "else" ~ body }

body               = ${ blank ~ PEEK_ALL ~ PUSH(INDENT)
                        ~ (body_statement ~ INDENT? ~ blank ~ PEEK_ALL)* 
                        ~ expression ~ INDENT? ~ DROP 
                      }
    blank          = _{ ((INDENT? ~ COMMENT)? ~ "\n")+ }
    body_statement = _{ assignment }

algebraic_expr      = { (MATH_PRE_OP? ~ (alg_value | nested_alg_expr) ~ MATH_IN_OP?)+ }
    nested_alg_expr = _{ "(" ~ algebraic_expr ~ ")" }
    alg_value       = _{ call | NUMBER }

bool_expr            = { (BOOL_PRE_OP? ~ (bool_value | nested_bool_expr) ~ BOOL_IN_OP?)+ }
    nested_bool_expr = _{ "(" ~ bool_expr ~ ")" }
    bool_value       = _{ BOOL | call | comparison }
    comparison       = { comp_value ~ COMP_OP ~ comp_value }
    comp_value       = _{ NUMBER | STRING | call }

node                  = !{ node_id ~ "from" ~ node_id ~ attributes? }
    node_id           = ${ ID ~ (node_id_inner ~ ID?)? }
        node_id_inner = !{ "{" ~ (call | NUMBER | STRING) ~ "}" }
    attributes        = { child_attr+ }
    parent_attr       = { attribute ~ attributes }
    child_attr        = ${ (COMMENT | "\n")+ ~ PEEK_ALL ~ PUSH(INDENT) ~ (parent_attr | attribute)? ~ DROP }
    attribute         = !{ KEY ~ ":" ~ expression
                           | node 
                           | call 
                         }

node_anon = !{ "from" ~ attributes }

list = !{ "[" ~ "\n"* ~ expression  ~ ("\n"* ~ "," ~ "\n"* ~ expression ~ "\n"*)* ~ "]" }

call            = !{ (fn_call | ID) ~ list_index* ~ attr_access? }
    fn_call     = { ID ~ ("(" ~ expression* ~ ")") }
    list_index  = { "[" ~ (NUMBER | call) ~ "]" }
    attr_access = _{ ("\n"* ~ "." ~ call)+ }

GD_VALUE           = ${ "`" ~ GD_VALUE_INNER ~ "`" }
    GD_VALUE_INNER = { (!(NEWLINE | "`") ~ ANY)* }
STRING             = ${ "\"" ~ STRING_INNER ~ "\"" }
    STRING_INNER   = { (!(NEWLINE | "\"") ~ ANY)* }
BOOL               = { "true" | "false" }
MATH_IN_OP         = _{ PLUS | MINUS | DIV | MUL | MOD }
    PLUS           = { "+" }
    MINUS          = { "-" }
    DIV            = { "/" }
    MUL            = { "*" }
    MOD            = { "%" }
MATH_PRE_OP        = _{ NEG }
    NEG            = { "-" }
BOOL_IN_OP         = _{ AND | OR }
    AND            = { "&&" }
    OR             = { "||" }
BOOL_PRE_OP        = _{ NOT }
    NOT            = { "!" }
COMP_OP            = _{ EQ | NEQ | LT | GT | LT_EQ | GT_EQ }
    EQ             = { "==" }
    NEQ            = { "!=" }
    LT             = { "<" }
    GT             = { ">" }
    LT_EQ          = { "<=" }
    GT_EQ          = { ">=" }
NUMBER             = @{ "-"? ~ INT ~ ("." ~ DIGITS ~ EXP? | EXP)? }
    INT            = @{ "0" | (ASCII_NONZERO_DIGIT ~ DIGITS?) }
    DIGITS         = @{ (ASCII_DIGIT | ("_" ~ ASCII_DIGIT))+ }
    EXP            = @{ ("E" | "e") ~ ("+" | "-")? ~ INT }
KEY                = @{ "@"? ~ ID }
ID                 = @{ (LETTER ~ ("_" | LETTER | NUMBER )*) }
INDENT             = _{ (" " | "\t")+ }
COMMENT            = _{ "#" ~ (!NEWLINE ~ ANY)* }
WHITESPACE         = _{ " " | "\t" }
