module = { SOI ~ (statement | NEWLINE)* ~ EOI }

statement        = _{ (
                        assignment 
                        | node 
                        | signal_def
                        | animation_def
                        | func_def
                        | export
                        | if_expr 
                        | repeat_expr 
                        | ext_resource 
                        | sub_resource 
                        | call 
                      ) 
                      ~ NEWLINE 
                    }

ext_resource = { "ext" ~ ( STRING | ID ) }

sub_resource = { "sub" ~ node }

assignment   = !{ ID ~ "=" ~ NEWLINE* ~ expression }

func_def      = !{ "fn" ~ ID ~ func_args ~ body}
    func_args = { "(" ~ (ID ~ ("," ~ ID)*)? ~ ")" }

// it's easier to parse this way
export          = _{ export_func | export_var }
    export_func = {"export" ~ func_def}
    export_var  = {"export" ~ assignment}

signal_def    = !{ attr_id ~ "=>" ~ attr_id }
    attr_id   = { ID ~ ("." ~ ID )+ }

animation_def        = !{ attr_id ~ "~" ~ animation_params }
    animation_params = { node_id ~ attributes }

expression = _{ node 
                | object 
                | if_expr
                | repeat_expr
                | algebraic_expr 
                | bool_expr 
                | BOOL
                | call
                | list
                | NUMBER 
                | STRING 
                | GD_VALUE 
              }

if_expr    = !{ "if" ~ (bool_expr | BOOL | call) ~ body ~ elseif* ~ ifelse? }
    elseif = { NEWLINE+ ~ "else if" ~ (bool_expr | BOOL | call) ~ body }
    ifelse = { NEWLINE+ ~ "else" ~ body }
    
repeat_expr = !{ "repeat" ~ (INT | call) ~ body }

body               = ${ blank ~ PEEK_ALL ~ PUSH(INDENT)
                        ~ (body_statement ~ blank ~ (PEEK_ALL ~ body_statement ~ INDENT? ~ blank)*)? 
                        ~ PEEK_ALL? ~ expression ~ INDENT? ~ DROP
                      }
    body_statement = _{ assignment }

algebraic_expr      = !{ (MATH_PRE_OP ~ (alg_value | nested_alg_expr)) 
                         | (alg_value | nested_alg_expr) ~ (MATH_IN_OP ~ (alg_value | nested_alg_expr))+
                       }
    nested_alg_expr = _{ "(" ~ algebraic_expr ~ ")" }
    alg_value       = _{ call | NUMBER }

bool_expr            = !{ (bool_value | nested_bool_expr) ~ (BOOL_IN_OP ~ (bool_value | bool_expr))+ 
                          | nested_bool_expr
                        }
    nested_bool_expr = _{ BOOL_PRE_OP? ~ "(" ~ bool_expr ~ ")" }
    bool_value       = _{ BOOL_PRE_OP?  ~ (BOOL | comparison | call) }
        comparison   = { comp_value ~ COMP_OP ~ comp_value }
        comp_value   = _{ NUMBER | STRING | call }

call              = !{ property_call | list_index | fn_call | var_call }
    fn_call       = { ID ~ "(" ~ NEWLINE* ~ (expression ~ ("," ~ NEWLINE* ~ expression ~ NEWLINE*)*)? ~ ")" }
    var_call      = { ID }
    list_index    = { (fn_call | var_call) ~ ("[" ~ (NUMBER | call) ~ "]")+ }
    property_call = { (list_index | fn_call | var_call) ~ (NEWLINE* ~ "." ~ (list_index | fn_call | var_call))+ }

node                  = !{ node_id ~ "from" ~ node_id ~ attributes? }
    node_id           = ${ ID ~ (node_id_inner ~ ID?)? }
        node_id_inner = !{ "{" ~ (NUMBER | STRING | call) ~ "}" }
    attributes        = ${ blank ~ PEEK_ALL ~ PUSH(INDENT) ~ attribute ~ (blank ~ PEEK_ALL ~ attribute)* ~ DROP }
    attribute         = !{ (METAKEY | KEY) ~ ":" ~ (attributes | expression) ~ INDENT? }

object           = !{ "{" ~ attributes? ~ properties? ~ blank? ~ "}" }
    properties   = ${ property? ~ blank ~ PUSH(INDENT) ~ property ~ (blank ~ PEEK_ALL ~ property)* ~ DROP }
        property = _{ (func_def | assignment) ~ INDENT? }

list = !{ "[" ~ NEWLINE* ~ (expression  ~ (NEWLINE* ~ "," ~ NEWLINE* ~ expression ~ NEWLINE*)*)? ~ NEWLINE* ~ "]" }

blank              = _{ ((INDENT? ~ COMMENT)? ~ NEWLINE)+ }
GD_VALUE           = ${ "`" ~ GD_VALUE_INNER ~ "`" }
    GD_VALUE_INNER = { (!(NEWLINE | "`") ~ ANY)* }
STRING             = ${ "\"" ~ STRING_INNER ~ "\"" }
    STRING_INNER   = { (!(NEWLINE | "\"") ~ ANY)* }
BOOL               = { "true" | "false" }
MATH_IN_OP         = _{ PLUS | MINUS | DIV | MUL | MOD }
    PLUS           = { "+" }
    MINUS          = { "-" }
    DIV            = { "/" }
    MUL            = { "*" }
    MOD            = { "%" }
MATH_PRE_OP        = _{ NEG }
    NEG            = { "-" }
BOOL_IN_OP         = _{ AND | OR }
    AND            = { "&&" }
    OR             = { "||" }
BOOL_PRE_OP        = _{ NOT }
    NOT            = { "!" }
COMP_OP            = _{ EQ | NEQ | LT | GT | LT_EQ | GT_EQ }
    EQ             = { "==" }
    NEQ            = { "!=" }
    LT             = { "<" }
    GT             = { ">" }
    LT_EQ          = { "<=" }
    GT_EQ          = { ">=" }
NUMBER             = @{ "-"? ~ INT ~ ("." ~ DIGITS ~ EXP? | EXP)? }
    INT            = @{ "0" | (ASCII_NONZERO_DIGIT ~ DIGITS?) }
    DIGITS         = @{ (ASCII_DIGIT | ("_" ~ ASCII_DIGIT))+ }
    EXP            = @{ ("E" | "e") ~ ("+" | "-")? ~ INT }
METAKEY            = @{ "@" ~ ID }
KEY                = @{ ID }
ID                 = @{ LETTER ~ ("_" | LETTER | NUMBER )* }
INDENT             = _{ (" " | "\t")+ }
COMMENT            = _{ "#" ~ (!NEWLINE ~ ANY)* }
WHITESPACE         = _{ " " | "\t" }
